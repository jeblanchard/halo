read all base registers from each slot

assign a driver to each slot

for now i don't need to write something
super general. i just need to be able to
initialize the NIC via the PCI, that's it.

so to do that i need to:
    - read where the NIC base address
      is. (it should be 0x300) and assign
      the correct variable
    - how should this be represented in
      software though?
    - i can have a struct representing
      the configuration register for
      each device slot

    - the pci shouldn't know about the
      devices that are connected to it,
      at least in a "hardcoded" fashion

    - like the interrupts, the PCI should
      be dynamically allocated

    - this is done via the device IDs

    - so we check for the device IDs,
      then based on the IDs we find we
      run the initializer fort that
      device

how should the PCI know about the
initialization process of each
device? saving the function address
and calling seems awkward (but not
horrible). and using inline ASM is just
not recommended in general

what is the process that initializes
the PCI with the initialization details
of each device?

i suppose we just hard code those in,
from the PCI's perspective. although that
seems very very delicate.

does there have to be a synchronized communication
between the pci and the network controller?

the nic shouldn't be initialized until the pci
has been initialized.

i think we don't use inline assembly but we call
a function that calls the address provided
by the initializer. we can wrap this in a c
function however.

device info should definitely be stored in the
respective device driver

