ipv6 wraps icmp messages

icmp gets special treatment by being included
when it considers headers

icmp is used to standardize ip-level issues or other
maintenance-type messages

the neighbor solicitation message function needs
to customize both IP level and icmp level parameters.

i actually can't send an icmp message without invoking
ipv6.

what if i just pass an icmp message into an ipv6
function that adds the correct header then sends
the message? i think that's the best idea for now.

because it seems dynamically allocating memory for the
message body is the cleanest method, i need to alloc
and dealloc messages after they've been fully sent.

i don't like the alloc / dealloc. it forces the developer
(me) to keep in mind that the address MAY not exist anymore.
although this isn't the case, it's something i'd have to keep
in mind at the lower-levels of the protocol.

should i be worried about that though? should i assume that
the pointer passed to my function is valid? yes.
otherwise i'm going to be continuously pushing a large struct
onto the stack.

don't build anything until the last possible step. actually,
let's build the bytes of the message at each step then see
how it looks.

i can pass structs as much as i can to avoid the issue of
having to constantly use the byte count. won't i still need
the byte count?

i can't pass an unknown amount of bytes to a function unless i
use a struct or a pointer to place in memory.
